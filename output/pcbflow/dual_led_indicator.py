#!/usr/bin/env python3
"""
PCBflow Layout for dual_led_indicator
Generated by PCB Design Agency - Layout Agent
Date: 2025-10-04 12:25:17
"""

from pcbflow import *
import os

# Resolve KiCad footprint 'Lib:Footprint' -> absolute .kicad_mod path
def kicad_mod_path(lib_colon_fp: str) -> str:
    base = os.getenv('KICAD_FOOTPRINT_DIR', r'C:\Program Files\KiCad\9.0\share\kicad\footprints')
    if ':' not in lib_colon_fp:
        return lib_colon_fp  # already a path
    lib, fp = lib_colon_fp.split(':', 1)
    return os.path.join(base, f'{lib}.pretty', f'{fp}.kicad_mod')

# --- KiCad footprint text-layer normalizer + safe wrapper ---
import re, tempfile, io

def _normalize_fp_text_layers(kicad_mod_text: str) -> str:
    FRONT_DEFAULT = 'F.SilkS'
    BACK_DEFAULT  = 'B.SilkS'
    LAYER_MAP = {
        'F.SilkS':'F.SilkS', 'F.Fab':'F.Fab', 'F.CrtYd':'F.Fab',
        'B.SilkS':'B.SilkS', 'B.Fab':'B.Fab', 'B.CrtYd':'B.Fab',
    }
    def fix_layer_token(m):
        orig = m.group(1)
        if orig in LAYER_MAP:
            new = LAYER_MAP[orig]
        else:
            new = BACK_DEFAULT if orig.startswith('B.') else FRONT_DEFAULT
        return f'(layer "{new}")'
    def fix_fp_text_block(m):
        block = m.group(0)
        return re.sub(r'\(layer\s+"([^"]+)"\)', fix_layer_token, block)
    return re.sub(r'\(fp_text\b[\s\S]*?\)\s*\)', fix_fp_text_block, kicad_mod_text)

def normalize_kicad_mod_for_pcbflow(src_path: str) -> str:
    txt = open(src_path, 'r', encoding='utf-8').read()
    norm = _normalize_fp_text_layers(txt)
    d = tempfile.mkdtemp(prefix='pcbflow_fp_')
    out = f'{d}\norm.kicad_mod'
    open(out, 'w', encoding='utf-8').write(norm)
    return out

def safe_kicad_part(dc, lib_or_path: str, side='top'):
    path = kicad_mod_path(lib_or_path)
    try:
        return KiCadPart(dc, libraryfile=path, side=side)
    except Exception:
        np = normalize_kicad_mod_for_pcbflow(path)
        return KiCadPart(dc, libraryfile=np, side=side)

# Board dimensions: 50mm x 20mm
brd = Board((50, 20))

# Component placement
# Strategy: Connectors on edge, LEDs/indicators visible, passives near loads
# Placement uses absolute mm coordinates

# Place J1 connector
J1 = safe_kicad_part(brd.DC((25.0, 4.0)), 'Connector_JST:JST_PH_B2B-PH-K_1x02_P2.00mm_Vertical', side='top')

# Place D1 LED
D1 = safe_kicad_part(brd.DC((17.5, 15.0)), 'LED_SMD:LED_0805_2012Metric', side='top')

# Place D2 LED
D2 = safe_kicad_part(brd.DC((32.5, 15.0)), 'LED_SMD:LED_0805_2012Metric', side='top')

# Place R1 resistor near D1
R1 = safe_kicad_part(brd.DC((17.5, 10.0)), 'Resistor_SMD:R_0805_2012Metric', side='top')

# Place R2 resistor near D2
R2 = safe_kicad_part(brd.DC((32.5, 10.0)), 'Resistor_SMD:R_0805_2012Metric', side='top')

# Advanced trace routing with PCBflow algorithms
# PCBflow handles Manhattan routing, obstacle avoidance, and optimization
# Net: VCC (power)
# Multi-point routing for VCC
brd.route_net([J1.pads[0], R1.pads[0], R2.pads[0]], 0.25, algorithm='manhattan')
# PCBflow will find optimal paths avoiding obstacles

# Net: LED1_A (signal)
# Direct connection: R1_2 -> D1_1
brd.route_wire([R1.pads[1], D1.pads[0]], 0.25)

# Net: LED2_A (signal)
# Direct connection: R2_2 -> D2_1
brd.route_wire([R2.pads[1], D2.pads[0]], 0.25)

# Net: GND (power)
# Multi-point routing for GND
brd.route_net([D1.pads[1], J1.pads[1], D2.pads[1]], 0.25, algorithm='manhattan')
# PCBflow will find optimal paths avoiding obstacles

# Add vias for layer transitions (PCBflow handles automatically)
# PCBflow will add vias where traces need to change layers
# Optimize all routes for manufacturability
brd.optimize_routes()

# Add board outline and fabrication notes
brd.add_outline()

# Save PCB file
brd.save('output.kicad_pcb')
print('✓ Board file saved: output.kicad_pcb')

# Generate Gerber files for manufacturing
gerber_dir = 'gerbers'
brd.save_gerbers(gerber_dir)
print(f'✓ Gerber files saved to {gerber_dir}/')

# Generate preview images (PNG/SVG) for quick inspection
try:
    brd.save_png('preview.png', dpi=300)
    brd.save_svg('preview.svg')
    print('✓ Preview images saved: preview.png, preview.svg')
except Exception as e:
    print(f'Preview generation warning: {str(e)}')