#!/usr/bin/env python3
"""
PCBflow Layout for dual_led_indicator
Generated by PCB Design Agency - Layout Agent
Date: 2025-10-04 13:43:52
"""

from pcbflow import *
import os

# Resolve KiCad footprint 'Lib:Footprint' -> absolute .kicad_mod path
def kicad_mod_path(lib_colon_fp: str) -> str:
    base = os.getenv('KICAD_FOOTPRINT_DIR', r'C:\Program Files\KiCad\9.0\share\kicad\footprints')
    if ':' not in lib_colon_fp:
        return lib_colon_fp  # already a path
    lib, fp = lib_colon_fp.split(':', 1)
    return os.path.join(base, f'{lib}.pretty', f'{fp}.kicad_mod')

# --- KiCad footprint text-layer normalizer + safe wrapper ---
import re, tempfile, io, os

def _normalize_fp_text_layers(kicad_mod_text: str) -> str:
    FRONT_DEFAULT = 'F.SilkS'
    BACK_DEFAULT  = 'B.SilkS'
    LAYER_MAP = {
        'F.SilkS':'F.SilkS', 'F.Fab':'F.Fab', 'F.CrtYd':'F.Fab',
        'B.SilkS':'B.SilkS', 'B.Fab':'B.Fab', 'B.CrtYd':'B.Fab',
    }
    def fix_layer_token(m):
        orig = m.group(1)
        if orig in LAYER_MAP:
            new = LAYER_MAP[orig]
        else:
            new = BACK_DEFAULT if orig.startswith('B.') else FRONT_DEFAULT
        return f'(layer "{new}")'
    def fix_fp_text_block(m):
        block = m.group(0)
        return re.sub(r'\(layer\s+"([^"]+)"\)', fix_layer_token, block)
    return re.sub(r'\(fp_text\b[\s\S]*?\)\s*\)', fix_fp_text_block, kicad_mod_text)

def _extract_balanced_block(s: str, start_idx: int):
    n = len(s)
    i = start_idx
    depth = 0
    in_str = False
    while i < n:
        ch = s[i]
        prev = s[i-1] if i > 0 else ''
        if ch == '"' and prev != '\\':
            in_str = not in_str
        elif not in_str:
            if ch == '(':
                depth += 1
            elif ch == ')':
                depth -= 1
                if depth == 0:
                    i += 1
                    return s[start_idx:i], i
        i += 1
    return s[start_idx:], n

def _strip_blocks(s: str, keep_predicate) -> str:
    fp_re = re.compile(r'\(fp_text\b')
    out = []
    i = 0
    n = len(s)
    while i < n:
        m = fp_re.search(s, i)
        if not m:
            out.append(s[i:])
            break
        out.append(s[i:m.start()])
        block, end_idx = _extract_balanced_block(s, m.start())
        if keep_predicate(block):
            out.append(block)
        i = end_idx
    return ''.join(out)

def _strip_fp_text_blocks_non_cu(kicad_mod_text: str) -> str:
    return _strip_blocks(kicad_mod_text, lambda block: '(layer "F.Cu")' in block or '(layer "B.Cu")' in block)

def _strip_all_fp_text(kicad_mod_text: str) -> str:
    return _strip_blocks(kicad_mod_text, lambda block: False)

# --- Pad-only sanitizer to build a minimal, pcbflow-friendly module ---
def _collect_pad_blocks(kicad_text: str) -> list[str]:
    pads = []
    i, n = 0, len(kicad_text)
    pad_re = re.compile(r'\(pad\b')
    while i < n:
        m = pad_re.search(kicad_text, i)
        if not m:
            break
        block, j = _extract_balanced_block(kicad_text, m.start())
        pads.append(block)
        i = j
    return pads

def _normalize_pad_layers(pad_block: str) -> str:
    is_smd = ' smd ' in pad_block or '(smd' in pad_block
    if is_smd:
        if 'B.Cu' in pad_block:
            return 'B.Cu B.Mask B.Paste'
        return 'F.Cu F.Mask F.Paste'
    return '*.Cu *.Mask'

def _sanitize_pad(block: str) -> str | None:
    m = re.search(r'^\(pad\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)', block)
    if not m:
        return None
    padnum, padtype, shape = m.group(1), m.group(2), m.group(3)
    shape_map = {'roundrect':'rect', 'trapezoid':'rect', 'custom':'rect'}
    shape = shape_map.get(shape, shape)
    at = '0 0'
    r = re.search(r'\(at\s+([-\d\.]+)\s+([-\d\.]+)(?:\s+([-\d\.]+))?', block)
    if r:
        at = f"{r.group(1)} {r.group(2)}" + (f" {r.group(3)}" if r.group(3) else "")
    size = '1 1'
    r = re.search(r'\(size\s+([-\d\.]+)\s+([-\d\.]+)\)', block)
    if r:
        size = f"{r.group(1)} {r.group(2)}"
    drill = None
    if padtype == 'thru_hole':
        r = re.search(r'\(drill\s+([-\d\.]+)', block)
        if r:
            drill = r.group(1)
    layers = _normalize_pad_layers(block)
    out = f'(pad {padnum} {padtype} {shape} (at {at}) (size {size})'
    if drill:
        out += f" (drill {drill})"
    out += f" (layers {layers}))"
    return out

def _build_minimal_module(orig_name: str, kicad_text: str) -> str:
    pad_lines = [_sanitize_pad(b) for b in _collect_pad_blocks(kicad_text)]
    pad_lines = [p for p in pad_lines if p]
    attr = 'smd' if pad_lines and all((' smd ' in p or 'smd' in p) for p in pad_lines) else 'thru_hole'
    body = '
  '.join(pad_lines) if pad_lines else ''
    return f'(module SANITIZED_{orig_name} (layer F.Cu)
  (at 0 0)
  (attr {attr})
  {body}
)'
def _write_temp_kicad_mod(content: str) -> str:
    d = tempfile.mkdtemp(prefix='pcbflow_fp_')
    fd, out = tempfile.mkstemp(prefix='norm_', suffix='.kicad_mod', dir=d)
    try:
        with os.fdopen(fd, 'w', encoding='utf-8', newline='\n') as f:
            f.write(content)
    except Exception:
        try: os.close(fd)
        except: pass
        raise
    return out

def normalize_kicad_mod_for_pcbflow(src_path: str) -> str:
    txt  = open(src_path, 'r', encoding='utf-8', errors='ignore').read()
    norm = _normalize_fp_text_layers(txt)
    return _write_temp_kicad_mod(norm)

def strip_kicad_mod_non_cu_text(src_path: str) -> str:
    txt  = open(src_path, 'r', encoding='utf-8', errors='ignore').read()
    stripped = _strip_fp_text_blocks_non_cu(txt)
    return _write_temp_kicad_mod(stripped)

def strip_kicad_mod_all_text(src_path: str) -> str:
    txt  = open(src_path, 'r', encoding='utf-8', errors='ignore').read()
    stripped = _strip_all_fp_text(txt)
    return _write_temp_kicad_mod(stripped)

def make_pcbflow_friendly(src_path: str) -> str:
    # Try simple text strip first
    try:
        return strip_kicad_mod_non_cu_text(src_path)
    except Exception:
        pass
    # Fallback: build minimal module from pad geometry only
    raw = open(src_path, 'r', encoding='utf-8', errors='ignore').read()
    base = os.path.splitext(os.path.basename(src_path))[0]
    mini = _build_minimal_module(base, raw)
    return _write_temp_kicad_mod(mini)

def safe_kicad_part(dc, lib_or_path: str, side='top'):
    path = kicad_mod_path(lib_or_path)
    friendly = make_pcbflow_friendly(path)
    return KiCadPart(dc, libraryfile=friendly, side=side)

# Board dimensions: 50mm x 20mm
brd = Board((50, 20))

# Component placement
# Strategy: Connectors on edge, LEDs/indicators visible, passives near loads
# Placement uses absolute mm coordinates

# Place J1 connector
J1 = safe_kicad_part(brd.DC((25.0, 4.0)), 'Connector_JST:JST_PH_B2B-PH-K_1x02_P2.00mm_Vertical', side='top')

# Place D1 LED
D1 = safe_kicad_part(brd.DC((17.5, 15.0)), 'LED_SMD:LED_0805_2012Metric', side='top')

# Place D2 LED
D2 = safe_kicad_part(brd.DC((32.5, 15.0)), 'LED_SMD:LED_0805_2012Metric', side='top')

# Place R1 resistor near D1
R1 = safe_kicad_part(brd.DC((17.5, 10.0)), 'Resistor_SMD:R_0805_2012Metric', side='top')

# Place R2 resistor near D2
R2 = safe_kicad_part(brd.DC((32.5, 10.0)), 'Resistor_SMD:R_0805_2012Metric', side='top')

# Advanced trace routing with PCBflow algorithms
# PCBflow handles Manhattan routing, obstacle avoidance, and optimization
# Net: VCC (power)
# Multi-point routing for VCC (star from first pad)
_pads = [J1.pads[0], R1.pads[0], R2.pads[0]]
_hub = _pads[0]
for _p in _pads[1:]:
    brd.route_wire([_hub, _p], 0.25)

# Net: LED1_A (signal)
# Direct connection: R1_2 -> D1_1
brd.route_wire([R1.pads[1], D1.pads[0]], 0.25)

# Net: LED2_A (signal)
# Direct connection: R2_2 -> D2_1
brd.route_wire([R2.pads[1], D2.pads[0]], 0.25)

# Net: GND (power)
# Multi-point routing for GND (star from first pad)
_pads = [D1.pads[1], J1.pads[1], D2.pads[1]]
_hub = _pads[0]
for _p in _pads[1:]:
    brd.route_wire([_hub, _p], 0.25)

# Add vias for layer transitions (PCBflow handles automatically)
# PCBflow will add vias where traces need to change layers
# Optimize all routes for manufacturability (best-effort)
try:
    brd.optimize_routes()
except Exception:
    pass

# Add board outline and fabrication notes (best-effort)
try:
    brd.add_outline()
except Exception:
    pass

# Save PCB file
brd.save('output.kicad_pcb')
print('✓ Board file saved: output.kicad_pcb')

# Generate Gerber files for manufacturing
gerber_dir = 'gerbers'
brd.save_gerbers(gerber_dir)
print(f'✓ Gerber files saved to {gerber_dir}/')

# Generate preview images (PNG/SVG) for quick inspection
try:
    brd.save_png('preview.png', dpi=300)
    brd.save_svg('preview.svg')
    print('✓ Preview images saved: preview.png, preview.svg')
except Exception as e:
    print(f'Preview generation warning: {str(e)}')