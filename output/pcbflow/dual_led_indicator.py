#!/usr/bin/env python3
"""
PCBflow Layout for dual_led_indicator
Generated by PCB Design Agency - Layout Agent
Date: 2025-10-04 11:48:45
"""

from pcbflow import *

# Board dimensions: 50mm x 20mm
brd = Board((50, 20))

# Component placement
# Strategy: Connectors on edge, LEDs/indicators visible, passives near loads
# Set grid spacing for precise placement
brd.set_grid(0.5)

# Place J1 connector
J1 = brd.DC((25.0, 4.0), 'J1', 'JST_PH_B2B-PH-K_1x02_P2.00mm_Vertical')
# Snap J1 to grid for better routing
brd.snap_to_grid(J1)

# Place D1 LED
D1 = brd.DC((17.5, 15.0), 'D1', 'LED_0805_2012Metric')
brd.snap_to_grid(D1)

# Place D2 LED
D2 = brd.DC((32.5, 15.0), 'D2', 'LED_0805_2012Metric')
brd.snap_to_grid(D2)

# Place R1 resistor near D1
R1 = brd.DC((17.5, 10.0), 'R1', 'R_0805_2012Metric')
brd.snap_to_grid(R1)

# Place R2 resistor near D2
R2 = brd.DC((32.5, 10.0), 'R2', 'R_0805_2012Metric')
brd.snap_to_grid(R2)

# Advanced trace routing with PCBflow algorithms
# PCBflow handles Manhattan routing, obstacle avoidance, and optimization
# Net: VCC (power)
# Multi-point routing for VCC
brd.route_net([J1.pads[0], R1.pads[0], R2.pads[0]], 0.25, algorithm='manhattan')
# PCBflow will find optimal paths avoiding obstacles

# Net: LED1_A (signal)
# Direct connection: R1_2 -> D1_1
brd.route_wire([R1.pads[1], D1.pads[0]], 0.25)

# Net: LED2_A (signal)
# Direct connection: R2_2 -> D2_1
brd.route_wire([R2.pads[1], D2.pads[0]], 0.25)

# Net: GND (power)
# Multi-point routing for GND
brd.route_net([D1.pads[1], J1.pads[1], D2.pads[1]], 0.25, algorithm='manhattan')
# PCBflow will find optimal paths avoiding obstacles

# Add vias for layer transitions (PCBflow handles automatically)
# PCBflow will add vias where traces need to change layers
# Optimize all routes for manufacturability
brd.optimize_routes()

# Add board outline and fabrication notes
brd.add_outline()

# Save PCB file
brd.save('output.kicad_pcb')
print('✓ Board file saved: output.kicad_pcb')

# Generate Gerber files for manufacturing
gerber_dir = 'gerbers'
brd.save_gerbers(gerber_dir)
print(f'✓ Gerber files saved to {gerber_dir}/')

# Generate preview images (PNG/SVG) for quick inspection
try:
    brd.save_png('preview.png', dpi=300)
    brd.save_svg('preview.svg')
    print('✓ Preview images saved: preview.png, preview.svg')
except Exception as e:
    print(f'Preview generation warning: {str(e)}')